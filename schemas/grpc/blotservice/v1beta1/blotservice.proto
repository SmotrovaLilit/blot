syntax = "proto3";

package blotservice.v1beta1;

option go_package = "blotservice/v1beta1;blotservicepb";

service BlotService {
  rpc CreateGameSet(CreateGameSetRequest) returns (CreateGameSetResponse);
  rpc JoinGameSet(JoinGameSetRequest) returns (JoinGameSetResponse);
  rpc LeaveGameSet(LeaveGameSetRequest) returns (LeaveGameSetResponse);
  rpc StartGame(StartGameRequest) returns (StartGameResponse);
  rpc SetBet(SetBetRequest) returns (SetBetResponse);
  rpc AcceptBet(AcceptBetRequest) returns (AcceptBetResponse);
  rpc PlayCard(PlayCardRequest) returns (PlayCardResponse);

  rpc GetGameSetForPlayer(GetGameSetForPlayerRequest) returns (GetGameSetForPlayerResponse);
  rpc GetGameSetsForPlayer(GetGameSetsForPlayerRequest) returns (GetGameSetsForPlayerResponse);
}

message AcceptBetRequest {
  string game_set_id = 1;
  string player_id = 2;
}

message AcceptBetResponse {}

message SetBetRequest {
  string game_set_id = 1;
  string player_id = 2;
  Suit trump = 3;
  int32 amount = 4;
}

message SetBetResponse {}

message PlayCardRequest {
  string game_set_id = 1;
  string player_id = 2;
  Card card = 3;
}

message PlayCardResponse {}

message StartGameRequest {
  string game_set_id = 1;
  string game_id = 2;
  string player_id = 3;
}

message StartGameResponse {}

message LeaveGameSetRequest {
  string id = 1;
  string player_id = 2;
}

message LeaveGameSetResponse {}

message JoinGameSetRequest {
  string id = 1;
  string player_id = 2;
  string player_name = 3;
}

message JoinGameSetResponse {}

message CreateGameSetRequest {
  string id = 1;
  string player_id = 2;
  string player_name = 3;
}

message CreateGameSetResponse {}

message GetGameForPlayerRequest {
  string game_id = 1;
  string player_id = 2;
}

message GetGameSetForPlayerRequest {
  string id = 1;
  string player_id = 2;
}

message GetGameSetForPlayerResponse {
  GameSet game_set = 1;
}

message GetGameSetsForPlayerRequest {
  string player_id = 1;
}

message GetGameSetsForPlayerResponse {
  repeated GameSet game_sets = 1;
}

message GameSet {
  string id = 1;
  string owner_id = 2;
  // Return players how they sit at the table (clockwise)
  repeated Player players = 3;
  GameSetStatus status = 4;
  Game game = 5;
}

message Game {
  string id = 1;
  GameStatus status = 2;
  repeated Round rounds = 3;
  optional Bet bet = 4;
  Team team1 = 5;
  Team team2 = 6;
  repeated PlayerStateInGame player_states = 7;
  string current_turn_player_id = 8;
}

message Bet {
  Suit trump = 1;
  int32 amount = 2;
  string team_id = 3;
}

message Team {
  string id = 1;
  string player1 = 2;
  string player2 = 3;
}

message Player {
  string id = 1;
  string name = 2;
}

message PlayerStateInGame {
  string id = 1;
  repeated Card hand_cards = 4;
}

message Round {
  int32 number = 1;
  repeated PlayedCard table_cards = 2;
  string winner_id = 3;
  int32 score = 4;
}

message PlayedCard {
  string player_id = 1;
  Card card = 2;
}

message Card {
  Rank rank = 1;
  Suit suit = 2;
}

enum GameSetStatus {
  GAME_SET_STATUS_UNSPECIFIED = 0;
  GAME_SET_STATUS_WAITED_FOR_PLAYERS = 1;
  GAME_SET_STATUS_READY_TO_START = 2;
  GAME_SET_STATUS_PLAYING = 3;
}

enum GameStatus {
  GAME_STATUS_UNSPECIFIED = 0;
  GAME_STATUS_BETTING = 1;
  GAME_STATUS_PLAYING = 2;
  GAME_STATUS_FINISHED = 3;
}

enum Rank {
  RANK_UNSPECIFIED = 0;
  RANK_ACE = 1;
  RANK_SEVEN = 2;
  RANK_EIGHT = 3;
  RANK_NINE = 4;
  RANK_TEN = 5;
  RANK_JACK = 6;
  RANK_QUEEN = 7;
  RANK_KING = 8;
}

enum Suit {
  SUIT_UNSPECIFIED = 0;
  SUIT_HEARTS = 1;
  SUIT_DIAMONDS = 2;
  SUIT_CLUBS = 3;
  SUIT_SPADES = 4;
}
