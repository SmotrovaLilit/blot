// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name
// @generated from protobuf file "blotservice/v1beta1/blotservice.proto" (package "blotservice.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message blotservice.v1beta1.PlayCardRequest
 */
export interface PlayCardRequest {
    /**
     * @generated from protobuf field: string game_set_id = 1;
     */
    game_set_id: string;
    /**
     * @generated from protobuf field: string player_id = 2;
     */
    player_id: string;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Card card = 3;
     */
    card?: Card;
}
/**
 * @generated from protobuf message blotservice.v1beta1.PlayCardResponse
 */
export interface PlayCardResponse {
}
/**
 * @generated from protobuf message blotservice.v1beta1.StartGameRequest
 */
export interface StartGameRequest {
    /**
     * @generated from protobuf field: string game_set_id = 1;
     */
    game_set_id: string;
    /**
     * @generated from protobuf field: string game_id = 2;
     */
    game_id: string;
    /**
     * @generated from protobuf field: string player_id = 3;
     */
    player_id: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.StartGameResponse
 */
export interface StartGameResponse {
}
/**
 * @generated from protobuf message blotservice.v1beta1.LeaveGameSetRequest
 */
export interface LeaveGameSetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string player_id = 2;
     */
    player_id: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.LeaveGameSetResponse
 */
export interface LeaveGameSetResponse {
}
/**
 * @generated from protobuf message blotservice.v1beta1.JoinGameSetRequest
 */
export interface JoinGameSetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string player_id = 2;
     */
    player_id: string;
    /**
     * @generated from protobuf field: string player_name = 3;
     */
    player_name: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.JoinGameSetResponse
 */
export interface JoinGameSetResponse {
}
/**
 * @generated from protobuf message blotservice.v1beta1.CreateGameSetRequest
 */
export interface CreateGameSetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string player_id = 2;
     */
    player_id: string;
    /**
     * @generated from protobuf field: string player_name = 3;
     */
    player_name: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.CreateGameSetResponse
 */
export interface CreateGameSetResponse {
}
/**
 * @generated from protobuf message blotservice.v1beta1.GetGameForPlayerRequest
 */
export interface GetGameForPlayerRequest {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    game_id: string;
    /**
     * @generated from protobuf field: string player_id = 2;
     */
    player_id: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.GetGameSetForPlayerRequest
 */
export interface GetGameSetForPlayerRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string player_id = 2;
     */
    player_id: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.GetGameSetForPlayerResponse
 */
export interface GetGameSetForPlayerResponse {
    /**
     * @generated from protobuf field: blotservice.v1beta1.GameSet game_set = 1;
     */
    game_set?: GameSet;
}
/**
 * @generated from protobuf message blotservice.v1beta1.GetGameSetsForPlayerRequest
 */
export interface GetGameSetsForPlayerRequest {
    /**
     * @generated from protobuf field: string player_id = 1;
     */
    player_id: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.GetGameSetsForPlayerResponse
 */
export interface GetGameSetsForPlayerResponse {
    /**
     * @generated from protobuf field: repeated blotservice.v1beta1.GameSet game_sets = 1;
     */
    game_sets: GameSet[];
}
/**
 * @generated from protobuf message blotservice.v1beta1.GameSet
 */
export interface GameSet {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string owner_id = 2;
     */
    owner_id: string;
    /**
     * Return players how they sit at the table (clockwise)
     *
     * @generated from protobuf field: repeated blotservice.v1beta1.Player players = 3;
     */
    players: Player[];
    /**
     * @generated from protobuf field: blotservice.v1beta1.GameSetStatus status = 4;
     */
    status: GameSetStatus;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Game game = 7;
     */
    game?: Game;
}
/**
 * @generated from protobuf message blotservice.v1beta1.Game
 */
export interface Game {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: blotservice.v1beta1.GameStatus status = 2;
     */
    status: GameStatus;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Round round = 3;
     */
    round?: Round;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Bet bet = 4;
     */
    bet?: Bet;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Team team1 = 5;
     */
    team1?: Team;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Team team2 = 6;
     */
    team2?: Team;
    /**
     * @generated from protobuf field: repeated blotservice.v1beta1.PlayerStateInGame player_states = 7;
     */
    player_states: PlayerStateInGame[];
}
/**
 * @generated from protobuf message blotservice.v1beta1.Bet
 */
export interface Bet {
    /**
     * @generated from protobuf field: blotservice.v1beta1.Suit trump = 1;
     */
    trump: Suit;
    /**
     * @generated from protobuf field: string team_id = 2;
     */
    team_id: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
}
/**
 * @generated from protobuf message blotservice.v1beta1.Team
 */
export interface Team {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string player1 = 2;
     */
    player1: string;
    /**
     * @generated from protobuf field: string player2 = 3;
     */
    player2: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.Player
 */
export interface Player {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.PlayerStateInGame
 */
export interface PlayerStateInGame {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: repeated blotservice.v1beta1.Card hand_cards = 4;
     */
    hand_cards: Card[];
}
/**
 * @generated from protobuf message blotservice.v1beta1.Round
 */
export interface Round {
    /**
     * @generated from protobuf field: int32 number = 1;
     */
    number: number;
    /**
     * @generated from protobuf field: repeated blotservice.v1beta1.PlayedCard table_cards = 2;
     */
    table_cards: PlayedCard[];
    /**
     * @generated from protobuf field: blotservice.v1beta1.RoundStatus status = 3;
     */
    status: RoundStatus;
    /**
     * @generated from protobuf field: string current_player_id = 4;
     */
    current_player_id: string;
}
/**
 * @generated from protobuf message blotservice.v1beta1.PlayedCard
 */
export interface PlayedCard {
    /**
     * @generated from protobuf field: string player_id = 1;
     */
    player_id: string;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Card card = 2;
     */
    card?: Card;
}
/**
 * @generated from protobuf message blotservice.v1beta1.Card
 */
export interface Card {
    /**
     * @generated from protobuf field: blotservice.v1beta1.Rank rank = 1;
     */
    rank: Rank;
    /**
     * @generated from protobuf field: blotservice.v1beta1.Suit suit = 2;
     */
    suit: Suit;
}
/**
 * @generated from protobuf enum blotservice.v1beta1.RoundStatus
 */
export enum RoundStatus {
    /**
     * @generated from protobuf enum value: ROUND_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ROUND_STATUS_STARTED = 1;
     */
    STARTED = 1,
    /**
     * @generated from protobuf enum value: ROUND_STATUS_FINISHED = 2;
     */
    FINISHED = 2
}
/**
 * @generated from protobuf enum blotservice.v1beta1.GameSetStatus
 */
export enum GameSetStatus {
    /**
     * @generated from protobuf enum value: GAME_SET_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: GAME_SET_STATUS_WAITED_FOR_PLAYERS = 1;
     */
    WAITED_FOR_PLAYERS = 1,
    /**
     * @generated from protobuf enum value: GAME_SET_STATUS_READY_TO_START = 2;
     */
    READY_TO_START = 2,
    /**
     * @generated from protobuf enum value: GAME_SET_STATUS_PLAYING = 3;
     */
    PLAYING = 3
}
/**
 * @generated from protobuf enum blotservice.v1beta1.GameStatus
 */
export enum GameStatus {
    /**
     * @generated from protobuf enum value: GAME_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: GAME_STATUS_BETTING = 1;
     */
    BETTING = 1,
    /**
     * @generated from protobuf enum value: GAME_STATUS_PLAYING = 2;
     */
    PLAYING = 2,
    /**
     * @generated from protobuf enum value: GAME_STATUS_FINISHED = 3;
     */
    FINISHED = 3
}
/**
 * @generated from protobuf enum blotservice.v1beta1.Rank
 */
export enum Rank {
    /**
     * @generated from protobuf enum value: RANK_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RANK_ACE = 1;
     */
    ACE = 1,
    /**
     * @generated from protobuf enum value: RANK_SEVEN = 2;
     */
    SEVEN = 2,
    /**
     * @generated from protobuf enum value: RANK_EIGHT = 3;
     */
    EIGHT = 3,
    /**
     * @generated from protobuf enum value: RANK_NINE = 4;
     */
    NINE = 4,
    /**
     * @generated from protobuf enum value: RANK_TEN = 5;
     */
    TEN = 5,
    /**
     * @generated from protobuf enum value: RANK_JACK = 6;
     */
    JACK = 6,
    /**
     * @generated from protobuf enum value: RANK_QUEEN = 7;
     */
    QUEEN = 7,
    /**
     * @generated from protobuf enum value: RANK_KING = 8;
     */
    KING = 8
}
/**
 * @generated from protobuf enum blotservice.v1beta1.Suit
 */
export enum Suit {
    /**
     * @generated from protobuf enum value: SUIT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SUIT_HEARTS = 1;
     */
    HEARTS = 1,
    /**
     * @generated from protobuf enum value: SUIT_DIAMONDS = 2;
     */
    DIAMONDS = 2,
    /**
     * @generated from protobuf enum value: SUIT_CLUBS = 3;
     */
    CLUBS = 3,
    /**
     * @generated from protobuf enum value: SUIT_SPADES = 4;
     */
    SPADES = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayCardRequest$Type extends MessageType<PlayCardRequest> {
    constructor() {
        super("blotservice.v1beta1.PlayCardRequest", [
            { no: 1, name: "game_set_id", kind: "scalar", localName: "game_set_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "card", kind: "message", T: () => Card }
        ]);
    }
    create(value?: PartialMessage<PlayCardRequest>): PlayCardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.game_set_id = "";
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<PlayCardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayCardRequest): PlayCardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_set_id */ 1:
                    message.game_set_id = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.player_id = reader.string();
                    break;
                case /* blotservice.v1beta1.Card card */ 3:
                    message.card = Card.internalBinaryRead(reader, reader.uint32(), options, message.card);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayCardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_set_id = 1; */
        if (message.game_set_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.game_set_id);
        /* string player_id = 2; */
        if (message.player_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player_id);
        /* blotservice.v1beta1.Card card = 3; */
        if (message.card)
            Card.internalBinaryWrite(message.card, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.PlayCardRequest
 */
export const PlayCardRequest = new PlayCardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayCardResponse$Type extends MessageType<PlayCardResponse> {
    constructor() {
        super("blotservice.v1beta1.PlayCardResponse", []);
    }
    create(value?: PartialMessage<PlayCardResponse>): PlayCardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PlayCardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayCardResponse): PlayCardResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlayCardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.PlayCardResponse
 */
export const PlayCardResponse = new PlayCardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartGameRequest$Type extends MessageType<StartGameRequest> {
    constructor() {
        super("blotservice.v1beta1.StartGameRequest", [
            { no: 1, name: "game_set_id", kind: "scalar", localName: "game_set_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_id", kind: "scalar", localName: "game_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartGameRequest>): StartGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.game_set_id = "";
        message.game_id = "";
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<StartGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartGameRequest): StartGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_set_id */ 1:
                    message.game_set_id = reader.string();
                    break;
                case /* string game_id */ 2:
                    message.game_id = reader.string();
                    break;
                case /* string player_id */ 3:
                    message.player_id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_set_id = 1; */
        if (message.game_set_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.game_set_id);
        /* string game_id = 2; */
        if (message.game_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.game_id);
        /* string player_id = 3; */
        if (message.player_id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player_id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.StartGameRequest
 */
export const StartGameRequest = new StartGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartGameResponse$Type extends MessageType<StartGameResponse> {
    constructor() {
        super("blotservice.v1beta1.StartGameResponse", []);
    }
    create(value?: PartialMessage<StartGameResponse>): StartGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartGameResponse): StartGameResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.StartGameResponse
 */
export const StartGameResponse = new StartGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveGameSetRequest$Type extends MessageType<LeaveGameSetRequest> {
    constructor() {
        super("blotservice.v1beta1.LeaveGameSetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LeaveGameSetRequest>): LeaveGameSetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<LeaveGameSetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveGameSetRequest): LeaveGameSetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.player_id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaveGameSetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string player_id = 2; */
        if (message.player_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player_id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.LeaveGameSetRequest
 */
export const LeaveGameSetRequest = new LeaveGameSetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveGameSetResponse$Type extends MessageType<LeaveGameSetResponse> {
    constructor() {
        super("blotservice.v1beta1.LeaveGameSetResponse", []);
    }
    create(value?: PartialMessage<LeaveGameSetResponse>): LeaveGameSetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LeaveGameSetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveGameSetResponse): LeaveGameSetResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveGameSetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.LeaveGameSetResponse
 */
export const LeaveGameSetResponse = new LeaveGameSetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinGameSetRequest$Type extends MessageType<JoinGameSetRequest> {
    constructor() {
        super("blotservice.v1beta1.JoinGameSetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_name", kind: "scalar", localName: "player_name", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinGameSetRequest>): JoinGameSetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.player_id = "";
        message.player_name = "";
        if (value !== undefined)
            reflectionMergePartial<JoinGameSetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinGameSetRequest): JoinGameSetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.player_id = reader.string();
                    break;
                case /* string player_name */ 3:
                    message.player_name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinGameSetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string player_id = 2; */
        if (message.player_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player_id);
        /* string player_name = 3; */
        if (message.player_name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player_name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.JoinGameSetRequest
 */
export const JoinGameSetRequest = new JoinGameSetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinGameSetResponse$Type extends MessageType<JoinGameSetResponse> {
    constructor() {
        super("blotservice.v1beta1.JoinGameSetResponse", []);
    }
    create(value?: PartialMessage<JoinGameSetResponse>): JoinGameSetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<JoinGameSetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinGameSetResponse): JoinGameSetResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: JoinGameSetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.JoinGameSetResponse
 */
export const JoinGameSetResponse = new JoinGameSetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameSetRequest$Type extends MessageType<CreateGameSetRequest> {
    constructor() {
        super("blotservice.v1beta1.CreateGameSetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_name", kind: "scalar", localName: "player_name", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGameSetRequest>): CreateGameSetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.player_id = "";
        message.player_name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGameSetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameSetRequest): CreateGameSetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.player_id = reader.string();
                    break;
                case /* string player_name */ 3:
                    message.player_name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGameSetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string player_id = 2; */
        if (message.player_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player_id);
        /* string player_name = 3; */
        if (message.player_name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player_name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.CreateGameSetRequest
 */
export const CreateGameSetRequest = new CreateGameSetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameSetResponse$Type extends MessageType<CreateGameSetResponse> {
    constructor() {
        super("blotservice.v1beta1.CreateGameSetResponse", []);
    }
    create(value?: PartialMessage<CreateGameSetResponse>): CreateGameSetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateGameSetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameSetResponse): CreateGameSetResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateGameSetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.CreateGameSetResponse
 */
export const CreateGameSetResponse = new CreateGameSetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameForPlayerRequest$Type extends MessageType<GetGameForPlayerRequest> {
    constructor() {
        super("blotservice.v1beta1.GetGameForPlayerRequest", [
            { no: 1, name: "game_id", kind: "scalar", localName: "game_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGameForPlayerRequest>): GetGameForPlayerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.game_id = "";
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<GetGameForPlayerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameForPlayerRequest): GetGameForPlayerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.game_id = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.player_id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameForPlayerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.game_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.game_id);
        /* string player_id = 2; */
        if (message.player_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player_id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.GetGameForPlayerRequest
 */
export const GetGameForPlayerRequest = new GetGameForPlayerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameSetForPlayerRequest$Type extends MessageType<GetGameSetForPlayerRequest> {
    constructor() {
        super("blotservice.v1beta1.GetGameSetForPlayerRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGameSetForPlayerRequest>): GetGameSetForPlayerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<GetGameSetForPlayerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameSetForPlayerRequest): GetGameSetForPlayerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string player_id */ 2:
                    message.player_id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameSetForPlayerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string player_id = 2; */
        if (message.player_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player_id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.GetGameSetForPlayerRequest
 */
export const GetGameSetForPlayerRequest = new GetGameSetForPlayerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameSetForPlayerResponse$Type extends MessageType<GetGameSetForPlayerResponse> {
    constructor() {
        super("blotservice.v1beta1.GetGameSetForPlayerResponse", [
            { no: 1, name: "game_set", kind: "message", localName: "game_set", T: () => GameSet }
        ]);
    }
    create(value?: PartialMessage<GetGameSetForPlayerResponse>): GetGameSetForPlayerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGameSetForPlayerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameSetForPlayerResponse): GetGameSetForPlayerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* blotservice.v1beta1.GameSet game_set */ 1:
                    message.game_set = GameSet.internalBinaryRead(reader, reader.uint32(), options, message.game_set);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameSetForPlayerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* blotservice.v1beta1.GameSet game_set = 1; */
        if (message.game_set)
            GameSet.internalBinaryWrite(message.game_set, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.GetGameSetForPlayerResponse
 */
export const GetGameSetForPlayerResponse = new GetGameSetForPlayerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameSetsForPlayerRequest$Type extends MessageType<GetGameSetsForPlayerRequest> {
    constructor() {
        super("blotservice.v1beta1.GetGameSetsForPlayerRequest", [
            { no: 1, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGameSetsForPlayerRequest>): GetGameSetsForPlayerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<GetGameSetsForPlayerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameSetsForPlayerRequest): GetGameSetsForPlayerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player_id */ 1:
                    message.player_id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameSetsForPlayerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player_id = 1; */
        if (message.player_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.player_id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.GetGameSetsForPlayerRequest
 */
export const GetGameSetsForPlayerRequest = new GetGameSetsForPlayerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameSetsForPlayerResponse$Type extends MessageType<GetGameSetsForPlayerResponse> {
    constructor() {
        super("blotservice.v1beta1.GetGameSetsForPlayerResponse", [
            { no: 1, name: "game_sets", kind: "message", localName: "game_sets", repeat: 1 /*RepeatType.PACKED*/, T: () => GameSet }
        ]);
    }
    create(value?: PartialMessage<GetGameSetsForPlayerResponse>): GetGameSetsForPlayerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.game_sets = [];
        if (value !== undefined)
            reflectionMergePartial<GetGameSetsForPlayerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameSetsForPlayerResponse): GetGameSetsForPlayerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated blotservice.v1beta1.GameSet game_sets */ 1:
                    message.game_sets.push(GameSet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameSetsForPlayerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated blotservice.v1beta1.GameSet game_sets = 1; */
        for (let i = 0; i < message.game_sets.length; i++)
            GameSet.internalBinaryWrite(message.game_sets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.GetGameSetsForPlayerResponse
 */
export const GetGameSetsForPlayerResponse = new GetGameSetsForPlayerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameSet$Type extends MessageType<GameSet> {
    constructor() {
        super("blotservice.v1beta1.GameSet", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "owner_id", kind: "scalar", localName: "owner_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },
            { no: 4, name: "status", kind: "enum", T: () => ["blotservice.v1beta1.GameSetStatus", GameSetStatus, "GAME_SET_STATUS_"] },
            { no: 7, name: "game", kind: "message", T: () => Game }
        ]);
    }
    create(value?: PartialMessage<GameSet>): GameSet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.owner_id = "";
        message.players = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GameSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameSet): GameSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string owner_id */ 2:
                    message.owner_id = reader.string();
                    break;
                case /* repeated blotservice.v1beta1.Player players */ 3:
                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* blotservice.v1beta1.GameSetStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* blotservice.v1beta1.Game game */ 7:
                    message.game = Game.internalBinaryRead(reader, reader.uint32(), options, message.game);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string owner_id = 2; */
        if (message.owner_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.owner_id);
        /* repeated blotservice.v1beta1.Player players = 3; */
        for (let i = 0; i < message.players.length; i++)
            Player.internalBinaryWrite(message.players[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* blotservice.v1beta1.GameSetStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* blotservice.v1beta1.Game game = 7; */
        if (message.game)
            Game.internalBinaryWrite(message.game, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.GameSet
 */
export const GameSet = new GameSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Game$Type extends MessageType<Game> {
    constructor() {
        super("blotservice.v1beta1.Game", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["blotservice.v1beta1.GameStatus", GameStatus, "GAME_STATUS_"] },
            { no: 3, name: "round", kind: "message", T: () => Round },
            { no: 4, name: "bet", kind: "message", T: () => Bet },
            { no: 5, name: "team1", kind: "message", T: () => Team },
            { no: 6, name: "team2", kind: "message", T: () => Team },
            { no: 7, name: "player_states", kind: "message", localName: "player_states", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStateInGame }
        ]);
    }
    create(value?: PartialMessage<Game>): Game {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.status = 0;
        message.player_states = [];
        if (value !== undefined)
            reflectionMergePartial<Game>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Game): Game {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* blotservice.v1beta1.GameStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* blotservice.v1beta1.Round round */ 3:
                    message.round = Round.internalBinaryRead(reader, reader.uint32(), options, message.round);
                    break;
                case /* blotservice.v1beta1.Bet bet */ 4:
                    message.bet = Bet.internalBinaryRead(reader, reader.uint32(), options, message.bet);
                    break;
                case /* blotservice.v1beta1.Team team1 */ 5:
                    message.team1 = Team.internalBinaryRead(reader, reader.uint32(), options, message.team1);
                    break;
                case /* blotservice.v1beta1.Team team2 */ 6:
                    message.team2 = Team.internalBinaryRead(reader, reader.uint32(), options, message.team2);
                    break;
                case /* repeated blotservice.v1beta1.PlayerStateInGame player_states */ 7:
                    message.player_states.push(PlayerStateInGame.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Game, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* blotservice.v1beta1.GameStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* blotservice.v1beta1.Round round = 3; */
        if (message.round)
            Round.internalBinaryWrite(message.round, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* blotservice.v1beta1.Bet bet = 4; */
        if (message.bet)
            Bet.internalBinaryWrite(message.bet, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* blotservice.v1beta1.Team team1 = 5; */
        if (message.team1)
            Team.internalBinaryWrite(message.team1, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* blotservice.v1beta1.Team team2 = 6; */
        if (message.team2)
            Team.internalBinaryWrite(message.team2, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated blotservice.v1beta1.PlayerStateInGame player_states = 7; */
        for (let i = 0; i < message.player_states.length; i++)
            PlayerStateInGame.internalBinaryWrite(message.player_states[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.Game
 */
export const Game = new Game$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bet$Type extends MessageType<Bet> {
    constructor() {
        super("blotservice.v1beta1.Bet", [
            { no: 1, name: "trump", kind: "enum", T: () => ["blotservice.v1beta1.Suit", Suit, "SUIT_"] },
            { no: 2, name: "team_id", kind: "scalar", localName: "team_id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Bet>): Bet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.trump = 0;
        message.team_id = "";
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<Bet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bet): Bet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* blotservice.v1beta1.Suit trump */ 1:
                    message.trump = reader.int32();
                    break;
                case /* string team_id */ 2:
                    message.team_id = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* blotservice.v1beta1.Suit trump = 1; */
        if (message.trump !== 0)
            writer.tag(1, WireType.Varint).int32(message.trump);
        /* string team_id = 2; */
        if (message.team_id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.team_id);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.Bet
 */
export const Bet = new Bet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Team$Type extends MessageType<Team> {
    constructor() {
        super("blotservice.v1beta1.Team", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player2", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Team>): Team {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.player1 = "";
        message.player2 = "";
        if (value !== undefined)
            reflectionMergePartial<Team>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Team): Team {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string player1 */ 2:
                    message.player1 = reader.string();
                    break;
                case /* string player2 */ 3:
                    message.player2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string player1 = 2; */
        if (message.player1 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player1);
        /* string player2 = 3; */
        if (message.player2 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.Team
 */
export const Team = new Team$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("blotservice.v1beta1.Player", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStateInGame$Type extends MessageType<PlayerStateInGame> {
    constructor() {
        super("blotservice.v1beta1.PlayerStateInGame", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hand_cards", kind: "message", localName: "hand_cards", repeat: 1 /*RepeatType.PACKED*/, T: () => Card }
        ]);
    }
    create(value?: PartialMessage<PlayerStateInGame>): PlayerStateInGame {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.hand_cards = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerStateInGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStateInGame): PlayerStateInGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* repeated blotservice.v1beta1.Card hand_cards */ 4:
                    message.hand_cards.push(Card.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStateInGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* repeated blotservice.v1beta1.Card hand_cards = 4; */
        for (let i = 0; i < message.hand_cards.length; i++)
            Card.internalBinaryWrite(message.hand_cards[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.PlayerStateInGame
 */
export const PlayerStateInGame = new PlayerStateInGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Round$Type extends MessageType<Round> {
    constructor() {
        super("blotservice.v1beta1.Round", [
            { no: 1, name: "number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "table_cards", kind: "message", localName: "table_cards", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayedCard },
            { no: 3, name: "status", kind: "enum", T: () => ["blotservice.v1beta1.RoundStatus", RoundStatus, "ROUND_STATUS_"] },
            { no: 4, name: "current_player_id", kind: "scalar", localName: "current_player_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Round>): Round {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.number = 0;
        message.table_cards = [];
        message.status = 0;
        message.current_player_id = "";
        if (value !== undefined)
            reflectionMergePartial<Round>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Round): Round {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 number */ 1:
                    message.number = reader.int32();
                    break;
                case /* repeated blotservice.v1beta1.PlayedCard table_cards */ 2:
                    message.table_cards.push(PlayedCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* blotservice.v1beta1.RoundStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string current_player_id */ 4:
                    message.current_player_id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Round, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 number = 1; */
        if (message.number !== 0)
            writer.tag(1, WireType.Varint).int32(message.number);
        /* repeated blotservice.v1beta1.PlayedCard table_cards = 2; */
        for (let i = 0; i < message.table_cards.length; i++)
            PlayedCard.internalBinaryWrite(message.table_cards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* blotservice.v1beta1.RoundStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string current_player_id = 4; */
        if (message.current_player_id !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.current_player_id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.Round
 */
export const Round = new Round$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayedCard$Type extends MessageType<PlayedCard> {
    constructor() {
        super("blotservice.v1beta1.PlayedCard", [
            { no: 1, name: "player_id", kind: "scalar", localName: "player_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "card", kind: "message", T: () => Card }
        ]);
    }
    create(value?: PartialMessage<PlayedCard>): PlayedCard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.player_id = "";
        if (value !== undefined)
            reflectionMergePartial<PlayedCard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayedCard): PlayedCard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player_id */ 1:
                    message.player_id = reader.string();
                    break;
                case /* blotservice.v1beta1.Card card */ 2:
                    message.card = Card.internalBinaryRead(reader, reader.uint32(), options, message.card);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayedCard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player_id = 1; */
        if (message.player_id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.player_id);
        /* blotservice.v1beta1.Card card = 2; */
        if (message.card)
            Card.internalBinaryWrite(message.card, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.PlayedCard
 */
export const PlayedCard = new PlayedCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Card$Type extends MessageType<Card> {
    constructor() {
        super("blotservice.v1beta1.Card", [
            { no: 1, name: "rank", kind: "enum", T: () => ["blotservice.v1beta1.Rank", Rank, "RANK_"] },
            { no: 2, name: "suit", kind: "enum", T: () => ["blotservice.v1beta1.Suit", Suit, "SUIT_"] }
        ]);
    }
    create(value?: PartialMessage<Card>): Card {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rank = 0;
        message.suit = 0;
        if (value !== undefined)
            reflectionMergePartial<Card>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Card): Card {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* blotservice.v1beta1.Rank rank */ 1:
                    message.rank = reader.int32();
                    break;
                case /* blotservice.v1beta1.Suit suit */ 2:
                    message.suit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Card, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* blotservice.v1beta1.Rank rank = 1; */
        if (message.rank !== 0)
            writer.tag(1, WireType.Varint).int32(message.rank);
        /* blotservice.v1beta1.Suit suit = 2; */
        if (message.suit !== 0)
            writer.tag(2, WireType.Varint).int32(message.suit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blotservice.v1beta1.Card
 */
export const Card = new Card$Type();
/**
 * @generated ServiceType for protobuf service blotservice.v1beta1.BlotService
 */
export const BlotService = new ServiceType("blotservice.v1beta1.BlotService", [
    { name: "CreateGameSet", options: {}, I: CreateGameSetRequest, O: CreateGameSetResponse },
    { name: "JoinGameSet", options: {}, I: JoinGameSetRequest, O: JoinGameSetResponse },
    { name: "LeaveGameSet", options: {}, I: LeaveGameSetRequest, O: LeaveGameSetResponse },
    { name: "StartGame", options: {}, I: StartGameRequest, O: StartGameResponse },
    { name: "PlayCard", options: {}, I: PlayCardRequest, O: PlayCardResponse },
    { name: "GetGameSetForPlayer", options: {}, I: GetGameSetForPlayerRequest, O: GetGameSetForPlayerResponse },
    { name: "GetGameSetsForPlayer", options: {}, I: GetGameSetsForPlayerRequest, O: GetGameSetsForPlayerResponse }
]);
